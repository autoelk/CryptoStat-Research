//******************************************************************************
//
// File:    BitGroup.java
// Package: edu.rit.crst
// Unit:    Class edu.rit.crst.BitGroup
//
// This Java source file is copyright (C) 2018 by Alan Kaminsky. All rights
// reserved. For further information, contact the author, Alan Kaminsky, at
// ark@cs.rit.edu.
//
// This Java source file is part of the CryptoStat Library ("CryptoStat").
// CryptoStat is free software; you can redistribute it and/or modify it under
// the terms of the GNU General Public License as published by the Free Software
// Foundation; either version 3 of the License, or (at your option) any later
// version.
//
// CryptoStat is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
// A PARTICULAR PURPOSE. See the GNU General Public License for more details.
//
// A copy of the GNU General Public License is provided in the file gpl.txt. You
// may also obtain a copy of the GNU General Public License on the World Wide
// Web at http://www.gnu.org/licenses/gpl.html.
//
//******************************************************************************

package edu.rit.crst;

/**
 * Class BitGroup is the abstract base class for an object that generates a
 * series of output bit groups for a cryptographic {@linkplain Function
 * Function}.
 *
 * @author  Alan Kaminsky
 * @version 21-Feb-2018
 */
public abstract class BitGroup
	{

// Hidden data members.

	/**
	 * Bit size of this bit group.
	 */
	protected int size;

	/**
	 * Number of generated bit groups.
	 */
	protected int count;

	/**
	 * Cryptographic function object.
	 */
	protected Function func;

	/**
	 * Matrix of bit groups.
	 */
	protected int[][] bgs;

// Exported constructors.

	/**
	 * Construct a new bit group generator.
	 *
	 * @param  size  Bit size of this bit group (1 .. 8).
	 *
	 * @exception  IllegalArgumentException
	 *     (unchecked exception) Thrown if <TT>size</TT> &lt; 1 or <TT>size</TT>
	 *     &gt; 8.
	 */
	public BitGroup
		(int size)
		{
		if (size < 1 || size > 8)
			throw new IllegalArgumentException (String.format
				("BigGroup(): size = %d illegal", size));
		this.size = size;
		}

// Exported operations.

	/**
	 * Set the cryptographic function for this bit group generator.
	 * <P>
	 * After setting the cryptographic function, this method calls the protected
	 * {@link #generate() generate()} method to generate the bit groups.
	 *
	 * @param  func   Cryptographic function object.
	 *
	 * @exception  NullPointerException
	 *     (unchecked exception) Thrown if <TT>func</TT> is null.
	 */
	public void setFunction
		(Function func)
		{
		if (func == null)
			throw new NullPointerException
				("BitGroup.setFunction(): func is null");
		this.func = func;
		count = func.C_bitSize() / size;
		bgs = new int [count] [size];
		generate();
		}

	/**
	 * Get a constructor expression for this bit group generator. The
	 * constructor expression can be passed to the {@link
	 * edu.rit.util.Instance#newInstance(String)
	 * edu.rit.util.Instance.newInstance()} method to construct an object that
	 * is the same as this bit group generator.
	 *
	 * @return  Constructor expression.
	 */
	public abstract String constructor();

	/**
	 * Get a description of this bit group generator.
	 *
	 * @return  Description.
	 */
	public abstract String description();

	/**
	 * Get the number of generated bit groups.
	 *
	 * @return  Number.
	 */
	public int count()
		{
		return count;
		}

	/**
	 * Get the bit size of the generated bit groups.
	 *
	 * @return  Bit size.
	 */
	public int bitSize()
		{
		return size;
		}

	/**
	 * Returns the number of histogram bins needed for a {@linkplain Test} using
	 * the generated bit groups.
	 *
	 * @return  Number of bins.
	 */
	public int bins()
		{
		return 1 << size;
		}

	/**
	 * Get a description of the given bit group generated by this bit group
	 * generator.
	 *
	 * @param  i  Bit group index (0 .. {@link #count() count()}&minus;1.
	 *
	 * @return  Description of bit group <TT>i</TT>.
	 *
	 * @exception  IndexOutOfBoundsException
	 *     (unchecked exception) Thrown if <TT>i</TT> is out of bounds.
	 */
	public abstract String bitGroupDescription
		(int i);

	/**
	 * Obtain the series of bit groups for the cryptographic function. The
	 * number of rows in the given matrix must be {@link #count() count()}. The
	 * number of columns in the given matrix must be {@link #bitSize()
	 * bitSize()}. On return, the <TT>bgs</TT> matrix contains the bit groups.
	 * In the matrix, each row represents one bit group. The elements of a row
	 * give the bit positions for that bit group.
	 *
	 * @param  bgs  Matrix in which to store bit groups.
	 *
	 * @exception  NullPointerException
	 *     (unchecked exception) Thrown if <TT>bgs</TT> is null.
	 * @exception  IllegalArgumentException
	 *     (unchecked exception) Thrown if the dimensions of <TT>bgs</TT> are
	 *     incorrect.
	 */
	public void bitGroups
		(int[][] bgs)
		{
		if (bgs.length != count)
			throw new IllegalArgumentException();
		for (int i = 0; i < this.bgs.length; ++ i)
			{
			if (bgs[i].length != size)
				throw new IllegalArgumentException();
			System.arraycopy (this.bgs[i], 0, bgs[i], 0, size);
			}
		}

// Hidden operations.

	/**
	 * Generate a series of bit groups for the cryptographic function. This
	 * method stores the bit groups in the protected {@link #bgs bgs} matrix. In
	 * the matrix, each row represents one bit group. The elements of a row give
	 * the bit positions for that bit group.
	 */
	protected abstract void generate();

	/**
	 * Get a description of the given bit group generated by this bit group
	 * generator, where the bit positions are adjacent to each other.
	 *
	 * @param  i  Bit group index (0 .. {@link #count() count()}&minus;1.
	 *
	 * @return  Description of bit group <TT>i</TT>.
	 *
	 * @exception  IndexOutOfBoundsException
	 *     (unchecked exception) Thrown if <TT>i</TT> is out of bounds.
	 */
	protected String adjacentBitsDescription
		(int i)
		{
		if (size == 1)
			return String.format ("Bit %d", bgs[i][0]);
		else
			return String.format ("Bits %d-%d", bgs[i][0], bgs[i][size-1]);
		}

	/**
	 * Get a description of the given bit group generated by this bit group
	 * generator, where the bit positions are scattered.
	 *
	 * @param  i  Bit group index (0 .. {@link #count() count()}&minus;1.
	 *
	 * @return  Description of bit group <TT>i</TT>.
	 *
	 * @exception  IndexOutOfBoundsException
	 *     (unchecked exception) Thrown if <TT>i</TT> is out of bounds.
	 */
	protected String scatteredBitsDescription
		(int i)
		{
		if (size == 1)
			{
			return String.format ("Bit %d", bgs[i][0]);
			}
		else
			{
			StringBuilder b = new StringBuilder();
			b.append ("Bits ");
			for (int j = 0; j < size; ++ j)
				{
				if (j > 0) b.append (',');
				b.append (bgs[i][j]);
				}
			return b.toString();
			}
		}

	}
