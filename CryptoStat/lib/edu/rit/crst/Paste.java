//******************************************************************************
//
// File:    Paste.java
// Package: edu.rit.crst
// Unit:    Class edu.rit.crst.Paste
//
// This Java source file is copyright (C) 2017 by Alan Kaminsky. All rights
// reserved. For further information, contact the author, Alan Kaminsky, at
// ark@cs.rit.edu.
//
// This Java source file is part of the CryptoStat Library ("CryptoStat").
// CryptoStat is free software; you can redistribute it and/or modify it under
// the terms of the GNU General Public License as published by the Free Software
// Foundation; either version 3 of the License, or (at your option) any later
// version.
//
// CryptoStat is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
// A PARTICULAR PURPOSE. See the GNU General Public License for more details.
//
// A copy of the GNU General Public License is provided in the file gpl.txt. You
// may also obtain a copy of the GNU General Public License on the World Wide
// Web at http://www.gnu.org/licenses/gpl.html.
//
//******************************************************************************

package edu.rit.crst;

import edu.rit.util.GpuBigIntArray;

/**
 * Class Paste provides an object that generates input values for a
 * cryptographic {@linkplain Function Function}.
 * <P>
 * An instance of class Paste is layered on top of two or more other input
 * generators. The latter are specified as arguments to the Paste constructor,
 * in the form of constructor expressions. The Paste constructor uses the
 * constructor expressions to create the underlying input generators. (For
 * further information about constructor expressions, see class {@linkplain
 * edu.rit.util.Instance edu.rit.util.Instance}.)
 * <P>
 * Class Paste invokes each underlying input generator to generate a series of
 * cryptographic function input values. For each combination of one input value
 * from each of these underlying input value series, class Paste generates an
 * input value by pasting (exclusive-oring) the underlying input values
 * together.
 *
 * @author  Alan Kaminsky
 * @version 24-Oct-2017
 */
public class Paste
	extends CombiningGenerator
	{

// Exported constructors.

	/**
	 * Construct a new pasting input generator.
	 *
	 * @param  ctors  Two or more constructor expressions for the underlying
	 *                input generators.
	 *
	 * @exception  NullPointerException
	 *     (unchecked exception) Thrown if <TT>ctors</TT> is null.
	 * @exception  IllegalArgumentException
	 *     (unchecked exception) Thrown if fewer than two constructor
	 *     expressions are specified.
	 */
	public Paste
		(String... ctors)
		{
		super (ctors);
		}

// Exported operations.

	/**
	 * Get a description of this input generator.
	 *
	 * @return  Description.
	 */
	public String description()
		{
		return super.description() + ", pasted together";
		}

// Hidden operations.

	/**
	 * Combine the given individual input value sequences together.
	 *
	 * @param  V    Array of {@linkplain GpuBigIntArray} objects. Each element
	 *              of the <TT>V</TT> array contains an input value series
	 *              generated by one of the underlying input generators.
	 * @param  len  Total number of input values in all the input value series.
	 *
	 * @return  A {@linkplain GpuBigIntArray} object containing the combined
	 *          input value series.
	 */
	protected GpuBigIntArray combine
		(GpuBigIntArray[] V,
		 int len)
		{
		// N = Number of underlying sequences.
		int N = V.length;

		// len[i] = Length of underlying sequence i.
		// M = Product of all len[i] = length of combined sequence.
		int[] max = new int [N];
		int M = 1;
		for (int i = 0; i < N; ++ i)
			{
			max[i] = V[i].item.length;
			M *= max[i];
			}

		// Set up combined sequence.
		GpuBigIntArray VV = new GpuBigIntArray (V[0].bitSize(), M);

		// Go through all combinations of inputs from underlying sequences.
		// index[i] = Index of input to combine from underlying sequence i.
		// VV[m] = Combined input for current combination.
		int[] index = new int [N];
		int m = 0;
		int carry = 0;
		while (carry == 0)
			{
			// Exclusive-or together the current underlying inputs.
			for (int i = 0; i < N; ++ i)
				VV.item[m] .xor (V[i].item[index[i]]);

			// Go to the next combination.
			++ m;
			carry = 1;
			for (int i = 0; i < N && carry == 1; ++ i)
				{
				index[i] += carry;
				if (index[i] == max[i])
					index[i] = 0;
				else
					carry = 0;
				}
			}

		return VV;
		}

	}
